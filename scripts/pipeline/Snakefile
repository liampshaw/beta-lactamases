GENES = ["CMY",\
			"CTX-M",\
			"GES",\
			"IMP",\
			"KPC",\
			"NDM",\
			"PER",\
			"SHV",\
			"TEM",\
			"VEB",\
			"VIM"]
DB = ["NCBI", "CARD"]

#FOCAL_GENES = ["CMY-2", "GES-24"]#, "CTX-M-15"]#,"GES-24","CTX-M-15","CTX-M-65","GES-24","IMP-1","KPC-2","NDM-1","PER-1","SHV-134","TEM-1","VIM-1"]
FOCAL_GENES = ["GES-24", "CMY-2"]
FOCAL_GENE_DICT = {"GES-24": "GES",
					"CMY-2": "CMY"}
#FOCAL_GENE_DICT = {"CMY-2": "CMY",
#					"GES-24": "GES"}#,
					#"CTX-M-15": "CTX-M"}

print(config['fastadir'])


rule all:
	input:
		expand("DB/plots/{db}-variants/{gene}.pdf", gene=GENES, db=DB),
		expand("DB/dists/{gene}_{db}.tsv", gene=GENES, db=DB),
		expand("analysis/{gene}_accessions.txt", gene=GENES),
		expand("analysis/sequence_assignments/{focal_gene}_{db}.csv", focal_gene=FOCAL_GENES, db=DB),
		expand("analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.snps.tsv", focal_gene=FOCAL_GENES),
		expand("data/{db}_db.fa", db=DB),	
		expand("contigs/{gene}_combined_contigs.fa", gene=GENES),
		expand("analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa", focal_gene=FOCAL_GENES),
		expand("analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.aln", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{focal_gene}_pangraph.fa", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{focal_gene}_extracted.fa", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{focal_gene}_pangraph.gfa.coloured.gfa", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{focal_gene}_{db}.output_dists.csv", focal_gene=FOCAL_GENES, db=DB),
		expand("pangraph/{focal_gene}/{focal_gene}_pangraph.json", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{focal_gene}.gene_block.txt", focal_gene=FOCAL_GENES),
		expand("analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.aln.refined.tre", focal_gene=FOCAL_GENES),
		expand("pangraph/{focal_gene}/{db}_plot_breakpoint_distances-all.pdf", focal_gene=FOCAL_GENES, db=DB)
		#expand("contigs/{focal_gene}/{focal_gene}_pangraph.gfa", focal_gene=FOCAL_GENES) if config["panx_export"]==True else expand("DB/plots/{db}-variants/{gene}.pdf", gene=GENES, db=DB)

		#expand("DB/variant_fasta/{focal_gene}_{db}.fa", focal_gene=FOCAL_GENES, db=DB)

#############################
### SETTING UP DATABASES ####
#############################

rule download_NCBI_DB:
	output:
		"data/NCBI_db.fa"
	shell:
		"wget https://ftp.ncbi.nlm.nih.gov/pathogen/Antimicrobial_resistance/AMRFinderPlus/database/3.11/2022-12-19.1/AMR_CDS -O {output}"

rule download_CARD_DB:
	output:
		"data/CARD_db.fa"
	run:
		shell("wget https://card.mcmaster.ca/download/0/broadstreet-v3.2.6.tar.bz2")
		shell("tar -xvf broadstreet-v3.2.6.tar.bz2 ./nucleotide_fasta_protein_homolog_model.fasta")
		shell("rm broadstreet-v3.2.6.tar.bz2")
		shell("mv nucleotide_fasta_protein_homolog_model.fasta {output}")

rule extract_genes_DB:
	input:
		fasta="data/{db}_db.fa"
	params:
		gene_name="{gene}",
		db="{db}"
	output:
		"DB/gene_fasta/{gene}_{db}.fa"
	shell:
		"python scripts/extract_gene_DB.py {input.fasta} {params.gene_name} {params.db} {output}"

rule align_genes_DB:
	input:
		"DB/gene_fasta/{gene}_{db}.fa"
	output:
		"DB/gene_alns/{gene}_{db}.aln"
	shell:
		"mafft --quiet --auto {input} > {output}"

rule snp_dists_DB:
	input:
		"DB/gene_alns/{gene}_{db}.aln"
	output:
		"DB/gene_alns/{gene}_{db}.tsv"
	shell:
		"snp-dists -a -b {input} > {output}"

rule run_fasttree_DB:
	input:
		"DB/gene_alns/{gene}_{db}.aln"
	output:
		"DB/gene_trees/{gene}_{db}.nwk"
	shell:
		"FastTree -quiet -nt -gtr {input} > {output}"

rule refine_fasttree_DB:
	input:
		tree= "DB/gene_trees/{gene}_{db}.nwk",
		aln= "DB/gene_alns/{gene}_{db}.aln"
	output:
		"DB/refined-trees/{gene}_{db}.nwk"
	shell:
		"python scripts/refine_tree.py --tree_in {input.tree} --aln {input.aln} --tree_out {output}"

rule plot_tree_DB:
	input:
		"DB/genes_refined-trees/{gene}_{db}.nwk"
	output:
		"DB/genes_plots/{db}-variants/{gene}.pdf"
	shell:
		"Rscript scripts/plot_tree.R {input} {output}"

rule run_metadata:
	input:
		metadata="data/metadata.csv"
	params:
		gene="{gene}"
	output:
		"analysis/{gene}_accessions.txt"
	script:
		"scripts/metadata_gene_combinations.py"


rule copy_variant_fasta: # highly inelegant - copies files so is wasteful. But I don't understand symbolic links in snakemake
    input:
        lambda wildcards: f"DB/gene_fasta/{FOCAL_GENE_DICT[wildcards.focal_gene]}"+"_{db}.fa"
    output:
        "DB/variant_fasta/{focal_gene}_{db}.fa"
    shell:
        "cp {input} {output}"


#############################
# GETTING CONTIG DATA READY #
#############################
rule combine_fastas_containing_gene:
	input:
		"analysis/{gene}_accessions.txt"
	output:
		"contigs/{gene}_combined_contigs.fa"
	run:
		shell("while read f; do cat "+f"{config['fastadir']}"+"/$f.fa >> {output}; done < {input}")

rule extract_genes_from_contigs:
	input:
		gene_fasta="data/focal_genes/{focal_gene}.fa",
		input_fasta= lambda wildcards:f"contigs/{FOCAL_GENE_DICT[wildcards.focal_gene]}"+"_combined_contigs.fa"
	params:
		snp_threshold=int(config["snp_threshold"])
	output:
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa"
	shell:
		"python scripts/extract_region_around_gene.py --gene {input.gene_fasta} \
												--input_fasta {input.input_fasta} \
												--output_fasta {output} \
												--upstream 0 \
												--downstream 0 \
												--threshold {params.snp_threshold}"

rule name_observed_genes:
	input:
		fasta="analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa",
		variants="DB/variant_fasta/{focal_gene}_{db}.fa"
	output:
		"analysis/sequence_assignments/{focal_gene}_{db}.csv"
	shell:
		"python scripts/name_variants.py --variant_fasta {input.variants} --output_file {output} --input_fasta {input.fasta}"

#############################
# RUNNING PANGRAPH PIPELINE #
#############################

rule extract_region_around_focal_gene:
	input:
		input_fasta=lambda wildcards:f"contigs/{FOCAL_GENE_DICT[wildcards.focal_gene]}"+"_combined_contigs.fa"
	params:
		focal_gene="data/focal_genes/{focal_gene}.fa",
		prefix="pangraph/{focal_gene}/{focal_gene}_extracted",
		upstream=config["region_upstream"],
		downstream=config["region_downstream"],
		threshold=int(config["snp_threshold"])
	output:
		"pangraph/{focal_gene}/{focal_gene}_extracted.fa"#,
	shell: 
		"python scripts/extract_region_around_gene.py --gene {params.focal_gene} --input {input.input_fasta} \
		--upstream {params.upstream} --downstream {params.upstream} --complete --output_fasta {params.prefix}.fa\
		--threshold {params.threshold}"

rule calculate_snp_dists_extracted_seqs:
	input:
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa"
	output:
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.snps.tsv",
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.aln",
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.txt"
	run:
		shell("mafft --auto {input} > {input}.aln"),
		shell("snp-dists -q -m {input}.aln > {output}")
		shell("seqkit rmdup -s < {input}.aln > {input}.dedup.aln -D {input}.dedup.txt")

rule tree_for_focal_gene:
	input:
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.aln"
	output:
		"analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.aln.refined.tre"
	run:
		shell("FastTree -nt -gtr {input} > {input}.tre")
		shell("python scripts/refine_tree.py --aln {input} --tree_in {input}.tre --tree_out {output}")


rule build_pangraph:
	input:
		"pangraph/{focal_gene}/{focal_gene}_extracted.fa"
	params:
		aligner=config["pangraph_aligner"],
		minlength=config["pangraph_minblocklength"]
	output:
		"pangraph/{focal_gene}/{focal_gene}_pangraph.json"
	shell:
		"pangraph build -k {params.aligner} --len {params.minlength} {input} > {output}" if config["pangraph_polish"]==False 
		else "pangraph build -k {params.aligner} --len {params.minlength} {input} | pangraph polish > {output}"


rule export_pangraph:
	input:
		"pangraph/{focal_gene}/{focal_gene}_pangraph.json"
	params:
		prefix="{focal_gene}_pangraph",
		outdir="pangraph/{focal_gene}/",
		edgeminlength=config["pangraph_edgeminlength"]
	output:
		"pangraph/{focal_gene}/{focal_gene}_pangraph.gfa",
		"pangraph/{focal_gene}/{focal_gene}_pangraph.fa"
	shell:
		"pangraph export --edge-minimum-length {params.edgeminlength} {input} \
							-p {params.prefix} \
							-o {params.outdir}" if config["panx_export"]==False else
		"pangraph export --edge-minimum-length {params.edgeminlength} {input} \
							-p {params.prefix} \
							-o {params.outdir} \
							--export-panX"


rule convert_pangraph_to_block_list:
	input:
		json="pangraph/{focal_gene}/{focal_gene}_pangraph.json",
		gfa="pangraph/{focal_gene}/{focal_gene}_pangraph.gfa"
	output:
		"pangraph/{focal_gene}/{focal_gene}_pangraph.gfa.coloured.gfa",
		"pangraph/{focal_gene}/{focal_gene}_pangraph.json.blocks.csv"
	shell:
		"python scripts/convert_pangraph_to_block_list.py --json {input.json} --gfa {input.gfa}"

rule find_focal_gene_block:
	input:
		focal_gene="data/focal_genes/{focal_gene}.fa",
		pangraph_fasta="pangraph/{focal_gene}/{focal_gene}_pangraph.fa"
	output:
		"pangraph/{focal_gene}/{focal_gene}.gene_block.txt"
	run:
		shell("makeblastdb -in {input.pangraph_fasta} -dbtype 'nucl'"),
		shell("blastn -query {input.focal_gene} -db {input.pangraph_fasta} -outfmt 6 | cut -f 2 > {output}")

rule compute_distances:
	input:
		block_csv="pangraph/{focal_gene}/{focal_gene}_pangraph.json.blocks.csv",
		gene_block="pangraph/{focal_gene}/{focal_gene}.gene_block.txt",
		snps="analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.snps.tsv"
	output:
		"pangraph/{focal_gene}/{focal_gene}_{db}.output_dists.csv"
	shell:
		"python scripts/compute_distances.py --block_csv {input.block_csv} \
											--gene_block_file {input.gene_block} \
											--snps {input.snps}\
											--output {output}"


rule plot_breakpoint_distances:
	input:
		dists="pangraph/{focal_gene}/{focal_gene}_{db}.output_dists.csv",
		deduplicated_focal_gene="analysis/sequence/{focal_gene}_seqs_extracted_from_contigs.fa.dedup.txt",
		variant_assignments="analysis/sequence_assignments/{focal_gene}_{db}.csv"
	params:
		focal_gene="{focal_gene}",
		output_pdf_prefix="pangraph/{focal_gene}/{db}_plot_breakpoint_distances"
	output:
		"pangraph/{focal_gene}/{db}_plot_breakpoint_distances-all.pdf",
	shell:
		"Rscript scripts/plot_output_dists.R {input.dists} {input.deduplicated_focal_gene} {input.variant_assignments}\
						--output_pdf_prefix {params.output_pdf_prefix} \
						--focal_gene {params.focal_gene}"

